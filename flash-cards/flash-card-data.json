{ 
  "array": [
  { "type": "ruby",
    "name": "&",
    "variables": {},
    "command": "[1,5,2] & [1,2]",
    "output": "[1,2]",
    "comment": "No change in original array",
    "change_original": false
  },
  { "type": "ruby",
    "name": "sort_by",
    "variables": {},
    "command": "['abc', 'abcd'].sort_by{ |word| word.length }",
    "output": "['abc', 'abcd']",
    "comment": "No change in original array.",
    "change_original": false
  },
  { "type": "ruby",
    "name": "map",
    "variables": {},
    "command": "[1,2,3].map{ |element| element += 1 }",
    "output": "[2,3,4]",
    "comment": "No change in original array.",
    "change_original": false
  },
  { "type": "ruby",
    "name": "compact",
    "variables": {},
    "command": "[nil,4,8,nil].compact",
    "output": "[4,8]",
    "comment": "No change in original array.",
    "change_original": false
  },
  { "type": "ruby",
    "name": "flatten",
    "variables": {},
    "command": "[2,3,[5,6],[8,9,10]].flatten",
    "output": "[2,3,5,6,8,9,10]",
    "comment": "No change in original array.",
    "change_original": false
  },
  { "type": "ruby",
    "name": "zip",
    "variables": {},
    "command": "['a','b','c'].zip([1,2,3])",
    "output": "[['a', 1],['b', 2],['c' ,3]]",
    "comment": "No change in original array.",
    "change_original": false
  },
  { "type": "ruby",
    "name": "zip",
    "variables": {},
    "command": "[4,8,15].zip([42,43])",
    "output": "[[4,42],[8,43],[15,nil]]",
    "comment": "No change in original array.",
    "change_original": false
  },
  { "type": "ruby",
    "name": "sort_by",
    "variables": { "a": [2,1,3,4], "b": [1,2,3,4] },
    "command": "a2.sort_by{ |element| a.index(element) }",
    "output": "[2,1,3,4]",
    "comment": "No change in original array.",
    "change_original": false
  },
  { "type": "ruby",
    "name": "flatten",
    "variables": {},
    "command": "[4,[8],[16,[23,42]]].flatten(1)",
    "output": "[4,8,15,16,[23,42]]",
    "comment": "No change in original array.",
    "change_original": false
  },
  { "type": "ruby",
    "name": "map",
    "variables": {},
    "command": "[4,7,1].map{ |element| element + 1 }",
    "output": "[5,8,2]",
    "comment": "No change in original array.",
    "change_original": false
  },
  { "type": "ruby",
    "name": "shuffle",
    "variables": {},
    "command": "[1,2,3].shuffle",
    "output": "[3,1,2]",
    "comment": "No change in original array.",
    "change_original": false
  },
  { "type": "ruby",
    "name": "select",
    "variables": {},
    "command": "[1,3,2,5,6].select{ |element| element > 3 }",
    "output": "[5,6]",
    "comment": "No change in original array.",
    "change_original": false
  },
  { "type": "ruby",
    "name": "uniq",
    "variables": {},
    "command": "[2,2,1,3,3].uniq",
    "output": "[2,1,3]",
    "comment": "No change in original array.",
    "change_original": false
  },
  { "type": "ruby",
    "name": "each",
    "variables": {},
    "command": "[[1,2],[3,4]].each{ |a,b| puts a }",
    "output": "1 \n 3",
    "comment": "No change in original array.",
    "change_original": false
  },
  { "type": "ruby",
    "name": "each_slice",
    "variables": {},
    "command": "[1,2,3,4,5].each_slice(2){ |slice| puts slice }",
    "output": "[1,2] \n [3,4] \n [5] \n nil",
    "comment": "No change in original array.",
    "change_original": false
  },
  { "type": "ruby",
    "name": "each_slice",
    "variables": {},
    "command": "[1,2,3,4].each_slice(2).to_a",
    "output": "[[1,2],[3,4]]",
    "comment": "No change in original array.",
    "change_original": false
  },
  { "type": "ruby",
    "name": "slice",
    "variables": {},
    "command": "[4,8,23,42].slice(2..3)",
    "output": "[23,42]",
    "comment": "No change in original array.",
    "change_original": false
  },
  { "type": "ruby",
    "name": "slice",
    "variables": {},
    "command": "[4,8,23,42].slice(2)",
    "output": "23",
    "comment": "No change in original array.",
    "change_original": false
  },
  { "type": "ruby",
    "name": "each_with_index",
    "variables": { "arr": ["a","b","c"] },
    "command": "arr.each_with_index{ |char, index| puts '\\#{index}. \\#{char}' }",
    "output": "1. a\n2. b\n3. c",
    "comment": "No change in original array.",
    "change_original": false
  },
  { "type": "ruby",
    "name": "each",
    "variables": { "arr": [1,2,3] },
    "command": "arr[0..1].each{ |element| puts element }",
    "output": "1\n2",
    "comment": "No change in original array.",
    "change_original": false
  },
  { "type": "ruby",
    "name": "values_at",
    "variables": {},
    "command": "[4,3,1,2].values_at 0,1",
    "output": "[4,3]",
    "comment": "No change in original array.",
    "change_original": false
  },
  { "type": "ruby",
    "name": "fetch",
    "variables": {},
    "command": "[1,2,3].fetch(100,'oops')",
    "output": "oops",
    "comment": "oops is an error message due to index out of bounds. 100 is the index. No change in the original array.",
    "change_original": false
  },
  { "type": "ruby",
    "name": "take",
    "variables": {},
    "command": "[1,2,3].take(2)",
    "output": "[1,2]",
    "comment": "No change in original array.",
    "change_original": false
  },
  { "type": "ruby",
    "name": "drop",
    "variables": {},
    "command": "[4,5,6,7].drop(3)",
    "output": "[7]",
    "comment": "No change in original array.",
    "change_original": false
  },
  { "type": "ruby",
    "name": "drop_while",
    "variables": {},
    "command": "[1,2,3,0].drop_while{ |element| element < 3 }",
    "output": "[3,0]",
    "comment": "No change in original array.",
    "change_original": false
  },
  { "type": "ruby",
    "name": "[]",
    "variables": { "arr": [1,2,3,4]},
    "command": "a[0..2]",
    "output": "[1,2,3]",
    "comment": "No change in original array.",
    "change_original": false
  },
  { "type": "ruby",
    "name": "[]==[]",
    "variables": {},
    "command": "['a','c',7] == ['a','c',7]",
    "output": "true",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "[]==[]",
    "variables": {},
    "command": "['a','c'] == ['a','c',7]",
    "output": "false",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "[]<=>[]",
    "variables": {},
    "command": "[1,2,3] <=> [1,2,3]",
    "output": "0",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "[]<=>[]",
    "variables": {},
    "command": "[1,2] <=> [1,:two]",
    "output": "nil",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "[]<=>[]",
    "variables": {},
    "command": "[1,2,3,4] <=> [1,2]",
    "output": "1",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "[]<=>[]",
    "variables": {},
    "command": "[a','a','c'] <=> ['a','b','c']",
    "output": "-1",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "Array",
    "variables": {},
    "command": "Array({ :a => 'a', :b => 'b' })",
    "output": "[[:a,'a'],[:b,'b']]",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "Array",
    "variables": {},
    "command": "Array.new(4){ Hash.new }",
    "output": "[{}, {}, {}, {}]",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "Array",
    "variables": {},
    "command": "Array.new(3)",
    "output": "[nil, nil, nil]",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "pop",
    "variables": {},
    "command": "[1,2,3,4].pop(2)",
    "output": "[3,4]",
    "comment": "Changes original array",
    "change_original": true
  },
  { "type": "ruby",
    "name": "Array",
    "variables": {},
    "command": "Array.new(3, true)",
    "output": "[true, true, true]",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "repeated_permutation",
    "variables": {},
    "command": "[1,2,3].repeated_permutation(3).to_a",
    "output": "[[1, 1, 1], [1, 1, 2], [1, 1, 3], [1, 2, 1], [1, 2, 2], [1, 2, 3], [1, 3, 1], [1, 3, 2], [1, 3, 3], [2, 1, 1], [2, 1, 2], [2, 1, 3], [2, 2, 1], [2, 2, 2], [2, 2, 3], [2, 3, 1], [2, 3, 2], [2, 3, 3], [3, 1, 1], [3, 1, 2], [3, 1, 3], [3, 2, 1], [3, 2, 2], [3, 2, 3], [3, 3, 1], [3, 3, 2], [3, 3, 3]]",
    "comment": "#<Enumerator: [1, 2, 3]:repeated_permutation(3)> without .to_a",
    "change_original": false
  },
  { "type": "ruby",
    "name": "index",
    "variables": {},
    "command": "[4,9,8].index(8)",
    "output": "2",
    "comment": "",
    "change_original": false
  },
  { "type": "ruby",
    "name": "class",
    "variables": {},
    "command": "[1,2,3].class",
    "output": "Array",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "join",
    "variables": {},
    "command": "[2,4,6].join(' ')",
    "output": "2 4 6",
    "comment": "",
    "change_original": false
  },
  { "type": "ruby",
    "name": "count",
    "variables": {},
    "command": "[2,3,4,5,6].count{ |element| element.even? }",
    "output": "3",
    "comment": "",
    "change_original": false
  },
  { "type": "ruby",
    "name": "product",
    "variables": { "arr": [1,2,3] },
    "command": "[1,2,3].product(arr).reject{ |prod| c.first == c.last }",
    "output": "[[1,2], [1,3], [2,1], [2,3], [3,1], [3,2]]",
    "comment": "",
    "change_original": false
  },
  { "type": "ruby",
    "name": "*",
    "variables": {},
    "command": "first, *middle, last = [42,43,44,45,46]",
    "output": "first = 42\nmiddle = [43,44,45]\nlast = 46",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "reduce",
    "variables": {},
    "command": "[1,2,3].reduce(0,:+)",
    "output": "6",
    "comment": "",
    "change_original": false
  },
  { "type": "ruby",
    "name": "count",
    "variables": {},
    "command": "['Spock', 'Kirk', 'Spock'].count('Spock')",
    "output": "2",
    "comment": "",
    "change_original": false
  },
  { "type": "ruby",
    "name": "count",
    "variables": {},
    "command": "[42,8,42].count(42)",
    "output": "2",
    "comment": "",
    "change_original": false
  },
  { "type": "ruby",
    "name": "permutation",
    "variables": {},
    "command": "[1,2,3].permutation.to_a",
    "output": "[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]",
    "comment": "#<Enumerator: [1, 2, 3]:permutation> without .to_a",
    "change_original": false
  },
  { "type": "ruby",
    "name": "permutation",
    "variables": {},
    "command": "[1,2,3,4].permutation(3).to_a",
    "output": "[[1, 2, 3], [1, 2, 4], [1, 3, 2], [1, 3, 4], [1, 4, 2], [1, 4, 3], [2, 1, 3], [2, 1, 4], [2, 3, 1], [2, 3, 4], [2, 4, 1], [2, 4, 3], [3, 1, 2], [3, 1, 4], [3, 2, 1], [3, 2, 4], [3, 4, 1], [3, 4, 2], [4, 1, 2], [4, 1, 3], [4, 2, 1], [4, 2, 3], [4, 3, 1], [4, 3, 2]]",
    "comment": "#<Enumerator: [1, 2, 3, 4]:permutation(3)> without .to_a",
    "change_original": false
  },
  { "type": "ruby",
    "name": "product",
    "variables": { "arr": [1,2,3] },
    "command": "['a','b','c'].product(arr)",
    "output": "[['a', '1'], ['a', '2'], ['a', '3'], ['b', '1'], ['b', '2'], ['b', '3'], ['c', '1'], ['c', '2'], ['c', '3]]",
    "comment": "",
    "change_original": false
  },
  { "type": "ruby",
    "name": "permutation",
    "variables": {},
    "command": "[1,2,3].permutation(2).to_a",
    "output": "[[1, 2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2]]",
    "comment": "#<Enumerator: [1, 2, 3]:permutation(2)> without .to_a",
    "change_original": false
  },
  { "type": "ruby",
    "name": "<<",
    "variables": {},
    "command": "[1,2] << 'c' << 'd'",
    "output": "[1,2,'c','d']",
    "comment": "Changes original array.",
    "change_original": true
  },
  { "type": "ruby",
    "name": "shift",
    "variables": {},
    "command": "[2,3,1].shift",
    "output": "2",
    "comment": "Changes original array.",
    "change_original": true
  },
  { "type": "ruby",
    "name": "<<",
    "variables": {},
    "command": "[2,2,3] << 5",
    "output": "[2,2,3,5]",
    "comment": "Changes original array.",
    "change_original": true
  },
  { "type": "ruby",
    "name": "delete_if",
    "variables": {},
    "command": "[2,2,3,5,4].delete_if{ |element| element == 2 }",
    "output": "[3,5,4]",
    "comment": "Changes original array.",
    "change_original": true
  },
  { "type": "ruby",
    "name": "join",
    "variables": {},
    "command": "[2,4,6].join",
    "output": "246",
    "comment": "",
    "change_original": false
  },
  { "type": "ruby",
    "name": "last",
    "variables": {},
    "command": "[2,3,5,1].last",
    "output": "1",
    "comment": "",
    "change_original": false
  },
  { "type": "ruby",
    "name": "any?",
    "variables": {},
    "command": "([1,5,2] & [1,2]).any?",
    "output": "true",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "shift",
    "variables": {},
    "command": "[4,8,15,42].shift(2)",
    "output": "[4,8]",
    "comment": "Changes original array.",
    "change_original": true
  },
  { "type": "ruby",
    "name": "push",
    "variables": {},
    "command": "[2,3,5].push('a')",
    "output": "[2,3,5,'a']",
    "comment": "Changes original array.",
    "change_original": true
  },
  { "type": "ruby",
    "name": "pop",
    "variables": {},
    "command": "[1,2,3].pop",
    "output": "3",
    "comment": "Changes original array.",
    "change_original": true
  },
  { "type": "ruby",
    "name": "count",
    "variables": {},
    "command": "[2,5,6].count",
    "output": "3",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "push",
    "variables": {},
    "command": "[2,3,5].push(7)",
    "output": "[2,3,5,7]",
    "comment": "Changes original array.",
    "change_original": true
  },
  { "type": "ruby",
    "name": "unshift",
    "variables": {},
    "command": "[1,2,3].unshift(5)",
    "output": "[5,1,2,3]",
    "comment": "Changes original array.",
    "change_original": true
  },
  { "type": "ruby",
    "name": "all?",
    "variables": {},
    "command": "[2,2,1,3,3].all?{ |element| element > 1 }",
    "output": "false",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "keep_if",
    "variables": {},
    "command": "[1,2,3,0].keep_if{ |element| element < 3 }",
    "output": "[1,2,0]",
    "comment": "Changes original array.",
    "change_original": true
  },
  { "type": "ruby",
    "name": "first",
    "variables": {},
    "command": "[2,3,5,1].first",
    "output": "2",
    "comment": "",
    "change_original": false
  }],
"string": [
  { "type": "ruby",
    "name": "scan",
    "variables": {},
    "command": "'Th-_ 8?a'.scan(/\\W/){ |char| puts char }",
    "output": "-\n \n?",
    "comment": "Non-alphanumeric and underscore.",
    "change_original": false
  },
  { "type": "ruby",
    "name": "scan",
    "variables": {},
    "command": "'Th-_ 8?a'.scan(/\\w/){ |char| puts char }",
    "output": "T\nh\n_\n8\na",
    "comment": "Alphanumeric and underscore.",
    "change_original": false
  },
  { "type": "ruby",
    "name": "scan",
    "variables": {},
    "command": "'Th-_ 8?a'.scan(/\\S/){ |char| puts char }",
    "output": "T\nh\n-\n_\n8\n?\na",
    "comment": "All non-whitespace.",
    "change_original": false
  },
  { "type": "ruby",
    "name": "scan",
    "variables": {},
    "command": "'This is'.scan(/../){ |char| puts char }",
    "output": "Th\nis\n i",
    "comment": "Any two consecutive chars.",
    "change_original": false
  },
  { "type": "ruby",
    "name": "scan",
    "variables": {},
    "command": "'This is'.scan(/..$/)",
    "output": "is",
    "comment": "The last two characters.",
    "change_original": false
  },
  { "type": "ruby",
    "name": "scan",
    "variables": {},
    "command": "'This is'.scan(/^../)",
    "output": "Th",
    "comment": "The first two characters.",
    "change_original": false
  },
  { "type": "ruby",
    "name": "scan",
    "variables": {},
    "command": "'Wow 1 +$001'.scan(/\\d+/){ |char| puts char }",
    "output": "1\n001",
    "comment": "All consecutive digits.",
    "change_original": false
  },
  { "type": "ruby",
    "name": "scan",
    "variables": {},
    "command": "'That \n is'.scan(/.\\Z/)",
    "output": "['s']",
    "comment": "Last character in a multi-line string.",
    "change_original": false
  },
  { "type": "ruby",
    "name": "scan",
    "variables": {},
    "command": "'That \n is.'.scan(/\\A./)",
    "output": "['T']",
    "comment": "The first character in a multi-line string.",
    "change_original": false
  },
  { "type": "ruby",
    "name": "scan",
    "variables": {},
    "command": "'This is'.scan(/[aeiou]/){ |char| puts char }",
    "output": "i\ni",
    "comment": "All vowels.",
    "change_original": false
  },
  { "type": "ruby",
    "name": "scan",
    "variables": {},
    "command": "'abcde'.scan(/[a-c]/){ |char| puts char }",
    "output": "a\nb\nc",
    "comment": "All characters a to c.",
    "change_original": false
  },
  { "type": "ruby",
    "name": "swapcase",
    "variables": {},
    "command": "'Live'.swapcase",
    "output": "lIVE",
    "comment": "",
    "change_original": false
  },
  { "type": "ruby",
    "name": "ord",
    "variables": {},
    "command": "'a'.ord",
    "output": "97",
    "comment": "The character's order in the ASCII code.",
    "change_original": null
  },
  { "type": "ruby",
    "name": "ord",
    "variables": {},
    "command": "'z'.ord",
    "output": "122",
    "comment": "The character's order in the ASCII code.",
    "change_original": null
  },
  { "type": "ruby",
    "name": "ord",
    "variables": {},
    "command": "'e'.ord",
    "output": "101",
    "comment": "The character's order in the ASCII code.",
    "change_original": null
  },
  { "type": "ruby",
    "name": "each_char",
    "variables": {},
    "command": "'Live'.each_char { |char| puts char }",
    "output": "L\ni\nv\ne",
    "comment": "See also each_char_with_index.",
    "change_original": null
  },
  { "type": "ruby",
    "name": "each_char_with_index",
    "variables": {},
    "command": "'Live'.each_char_with_index { |char, index| puts '\\#{index}. \\#{char}' }",
    "output": "1. L\n2. i\n3. v\n4. e",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "split",
    "variables": {},
    "command": "'Live'.split",
    "output": "['Live']",
    "comment": "",
    "change_original": false
  },
  { "type": "ruby",
    "name": "split",
    "variables": {},
    "command": "'Live'.split('')",
    "output": "['L','i','v','e']",
    "comment": "",
    "change_original": false
  },
  { "type": "ruby",
    "name": "index",
    "variables": {},
    "command": "'Live'.index('i')",
    "output": "1",
    "comment": "Retrieves the index of the character in teh String.",
    "change_original": null
  },
  { "type": "ruby",
    "name": "scan",
    "variables": {},
    "command": "'Th-_ 8?a'.scan(/\\d/)",
    "output": "[8]",
    "comment": "All numerical characters.",
    "change_original": false
  },
  { "type": "ruby",
    "name": "scan",
    "variables": {},
    "command": "'Th-_ 8?a'.scan(/\\D/)",
    "output": "['T', 'h', '-', '_', '', '?', 'a']",
    "comment": "All non-numerical characters.",
    "change_original": false
  },
  { "type": "ruby",
    "name": "scan",
    "variables": {},
    "command": "'Th-_ 8?a'.scan(/\\s/)",
    "output": " ",
    "comment": "White spaces, newlines, and tabs.",
    "change_original": false
  },
  { "type": "ruby",
    "name": "=~",
    "variables": {},
    "command": "true if 'Spock 32' =~ /\\d/",
    "output": "true",
    "comment": "Because the result is'nt nil.",
    "change_original": false
  },
  { "type": "ruby",
    "name": "gsub",
    "variables": {},
    "command": "'this is that'.gsub(/t/,'X')",
    "output": "Xhis is XhaX",
    "comment": "",
    "change_original": false
  },
  { "type": "ruby",
    "name": "=~",
    "variables": {},
    "command": "'!2,1,?-k' =~ /w/",
    "output": "1",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "=~",
    "variables": {},
    "command": "'1,2'?-k' =~ /\\w/",
    "output": "0",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "%{}",
    "variables": {},
    "command": "%w{a b c}",
    "output": "['a','b','c']",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "gsub",
    "variables": {"s": "live long and prosper"},
    "command": "s.gsub(/[a-z]+/){ |word| word.capitalize }",
    "output": "Live Long And Prosper",
    "comment": "",
    "change_original": false
  },
  { "type": "ruby",
    "name": "match",
    "variables": {},
    "command": "'Live long'.match(/\\w+/).to_s",
    "output": "Live",
    "comment": "",
    "change_original": false
  },
  { "type": "ruby",
    "name": "scan",
    "variables": {},
    "command": "'This is'.scan(/\\w\\w/){ |char| puts char }",
    "output": "Th\nis\nis",
    "comment": "Exctract all two consecutive alphanumerical characters.",
    "change_original": false
  },
  { "type": "ruby",
    "name": "insert",
    "variables": {},
    "command": "'hello'.insert(1,'X')",
    "output": "hXello",
    "comment": "",
    "change_original": true
  },
  { "type": "ruby",
    "name": "<<",
    "variables": {},
    "command": "'Live' << ' long'",
    "output": "Live long",
    "comment": "",
    "change_original": true  
  },
  { "type": "ruby",
    "name": "class",
    "variables": {},
    "command": "'Spock'.class",
    "output": "String",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "#{}",
    "variables": { "name": "Spock" },
    "command": "'Hello \\#{name}!'",
    "output": "Hello Spock!",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "scan",
    "variables": {},
    "command": "'Test! It. Works?'.scan(/\\.|\\!|\\?)",
    "output": "['!','.','?']",
    "comment": "",
    "change_original": false
  },
  { "type": "ruby",
    "name": "%q{}",
    "variables": {},
    "command": "%q{ Live\nlong\nand\n\nprosper }",
    "output": "Live\nlong\nand\n\nprosper",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "scan",
    "variables": {},
    "command": "'(hello[world])'.scan(/[\\(\\[\\]\\)])",
    "output": "['(','[',']',')']",
    "comment": "",
    "change_original": false
  },
  { "type": "ruby",
    "name": "scan",
    "variables": {},
    "command": "'a5kj7h8ee9'.scan(/\\d[A-Za-z]+\\d/)",
    "output": "['5kj7','8ee9']",
    "comment": "",
    "change_original": false
  },
  { "type": "ruby",
    "name": "scan",
    "variables": {},
    "command": "'[ab2k357'.scan(/[13579][13579]/)",
    "output": "['35']",
    "comment": "",
    "change_original": false
  },
  { "type": "ruby",
    "name": "scan",
    "variables": {},
    "command": "'123w555'.scan(/\\d{3}/)",
    "output": "['123','555']",
    "comment": "",
    "change_original": false
  }],
  "hash": [
  { "type": "ruby",
    "name": "has_value?",
    "variables": {},
    "command": "{ 'a' => 8, 'b' => 2 }.has_value?(8)",
    "output": "true",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "has_key?",
    "variables": {},
    "command": "{ 'a' => 8, 'b' => 2 }.has_key?('b')",
    "output": "true",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "select",
    "variables": {},
    "command": "{ 'a' => 8, 'b' => 2 }.select{ |key, value| value < 8 }",
    "output": "{ 'b' => 2 }",
    "comment": "",
    "change_original": false
  },
  { "type": "ruby",
    "name": "include?",
    "variables": {},
    "command": "{ 'a' => 8, 'b' => 2 }.include?('a')",
    "output": "true",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "min",
    "variables": {},
    "command": "{ 'a' => 8, 'b' => 2 }.min",
    "output": "{ 'a' => 8 }",
    "comment": "",
    "change_original": false
  },
  { "type": "ruby",
    "name": "max",
    "variables": {},
    "command": "{ 'a' => 8, 'b' => 2 }.max",
    "output": "{ 'b' => 2 }",
    "comment": "",
    "change_original": false
  },
  { "type": "ruby",
    "name": "length",
    "variables": {},
    "command": "{ 'a' => 8, 'b' => 2 }.length",
    "output": "2",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "sort",
    "variables": {},
    "command": "{ 'b' => 8, 'a' => 2 }.sort",
    "output": "{ 'a' => 2, 'b' => 8 }",
    "comment": "",
    "change_original": false
  },
  { "type": "ruby",
    "name": "shift",
    "variables": {},
    "command": "{ 'b' => 8, 'a' => 2 }.shift",
    "output": "{ 'b' => 8 }",
    "comment": "",
    "change_original": true
  },
  { "type": "ruby",
    "name": "value_at",
    "variables": {},
    "command": "{ 'a' => 8, 'b' => 2 }.value_at 'a', 'b'",
    "output": "[8, 2]",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "key",
    "variables": {},
    "command": "{ 'a' => 8, 'b' => 2 }.key(8)",
    "output": "a",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "class",
    "variables": {},
    "command": "{ 'a' => 8, 'b' => 2 }.class",
    "output": "Hash",
    "comment": "",
    "change_original": false
  },
  { "type": "ruby",
    "name": "sort_by",
    "variables": {},
    "command": "{ 'b' => 2, 'a' => 8 }.sort_by{ |key, value| key }",
    "output": "{ 'a' => 8, 'b' => 2 }",
    "comment": "",
    "change_original": false
  },
  { "type": "ruby",
    "name": "empty?",
    "variables": {},
    "command": "{}.empty?",
    "output": "true",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "update",
    "variables": {"a": { "a": 0, "b": 0, "c": 0 }, "b": { "a": 1, "b": 2, "c": 3, "d": 5 }},
    "command": "a.update(b)",
    "output": "{ 'a' => 1, 'b' => 2, 'c' => 3, 'd' => 5 }",
    "comment": "",
    "change_original": true
  },
  { "type": "ruby",
    "name": "select",
    "variables": {},
    "command": "{ 'a' => 2, 'b' => 8 }.select{ |key, value| key > 'a' }",
    "output": "{ 'b' => 8 }",
    "comment": "",
    "change_original": false
  },
  { "type": "ruby",
    "name": "values",
    "variables": {},
    "command": "{ 'a' => 8, 'b' => 2 }.values",
    "output": "[8, 2]",
    "comment": "",
    "change_original": false
  },
  { "type": "ruby",
    "name": "keys",
    "variables": {},
    "command": "{ 'a' => 8, 'b' => 2 }.keys",
    "output": "['a', 'b']",
    "comment": "",
    "change_original": false
  },
  { "type": "ruby",
    "name": "max_by",
    "variables": {},
    "command": "{ 'a' => 8, 'b' => 2 }.max_by{ |key, value| key }",
    "output": "{ 'b' => 2 }",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "each",
    "variables": {},
    "command": "{ 'a' => 8, 'b' => 2 }.each{ |a, b| p a }",
    "output": "",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "merge",
    "variables": {},
    "command": "{ 'a' => 8 }.merge({ 'b' => 2 })",
    "output": "{ 'a' => 8, 'b' => 2 }",
    "comment": "",
    "change_original": false
  },
  { "type": "ruby",
    "name": "delete_if",
    "variables": {},
    "command": "{ 'a' => 1, 'b' => 2 }.delete_if{ |key, value| key == 'a' }",
    "output": "{ 'b' => 2 }",
    "comment": "",
    "change_original": true
  },
  { "type": "ruby",
    "name": "Hash",
    "variables": {},
    "command": "Hash[[4,8],[15,16]]",
    "output": "{ '4' => 8, '15' => 16 }",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "map",
    "variables": {},
    "command": "{ 'a' => 8, 'b' => 2 }.map{ |key, value| value += 1 }",
    "output": "[9, 3]",
    "comment": "Returns array on hash.",
    "change_original": false
  },
  { "type": "ruby",
    "name": "Hash",
    "variables": {},
    "command": "Hash[4, 8]",
    "output": "{ '4' => 8 }",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "update",
    "variables": { "h": { "a": 8, "b": 2 }},
    "command": "h.update(h){ |key, value| value += 1 }",
    "output": "{ 'a' => 9, 'b' => 3 }",
    "comment": "",
    "change_original": true
  },
  { "type": "ruby",
    "name": "Hash",
    "variables": { "arr": [[4, 8], [15, 16]] },
    "command": "Hash[*arr.flatten]",
    "output": "{ '4' => 8, '15' => 16 }",
    "comment": "",
    "change_original": null
  }],
  "fixnum": [{ "type": "ruby",
    "name": "between?",
    "variables": {},
    "command": "5.between?(1, 10)",
    "output": "true",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "odd?",
    "variables": {},
    "command": "5.odd?",
    "output": "true",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "even?",
    "variables": {},
    "command": "6.even?",
    "output": "true",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "?",
    "variables": {},
    "command": "1 > 0 ? true : false",
    "output": "true",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "class",
    "variables": {},
    "command": "42.class",
    "output": "Fixnum",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "<=>",
    "variables": {},
    "command": "1 <=> 3",
    "output": "-1",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": ",",
    "variables": {},
    "command": "a, b = 1, 2",
    "output": "a = 1\nb = 2",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "divmod",
    "variables": {},
    "command": "100.divmod(11)",
    "output": "[9, 1]",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "&&",
    "variables": {},
    "command": "1 > 0 && 2 > 0",
    "output": "true",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "abs",
    "variables": {},
    "command": "-3.abs",
    "output": "3",
    "comment": "",
    "change_original": false
  },
  { "type": "ruby",
    "name": "chr",
    "variables": {},
    "command": "97.chr",
    "output": "a",
    "comment": "",
    "change_original": false
  },
  { "type": "ruby",
    "name": "next",
    "variables": {},
    "command": "41.next",
    "output": "42",
    "comment": "",
    "change_original": null
  }],
  "reg_exp": [{ "type": "ruby",
    "name": "\\D",
    "variables": {},
    "command": "/\\D/",
    "output": "Non-digit, e.g. a A w # % _ +.",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": ".",
    "variables": {},
    "command": "/./",
    "output": "All characters.",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "\\w",
    "variables": {},
    "command": "/\\w/",
    "output": "Alphanumeric and underscore, e.g. a _ B h 3 1",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "\\W",
    "variables": {},
    "command": "/\\W/",
    "output": "All non-alphanumeric, e.g. - ( * ? ]",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "\\d",
    "variables": {},
    "command": "/\\d/",
    "output": "Digits",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "\\Z",
    "variables": {},
    "command": "/..\\Z/",
    "output": "End anchor for multiline.",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "\\S",
    "variables": {},
    "command": "\\S",
    "output": "Non-whitespace (any visible character).",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "^",
    "variables": {},
    "command": "/[^z]/",
    "output": "Not z, e.g. ^z selects all characters except z.",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "$",
    "variables": {},
    "command": ".$",
    "output": "Anchor for the end of a non-multiline line. See also \\Z.",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "\\s",
    "variables": {},
    "command": "\\s",
    "output": "All spaces, tabs, and new lines.",
    "comment": "",
    "change_original": null
  },

  { "type": "ruby",
    "name": "\\A",
    "variables": {},
    "command": "\\A.",
    "output": "Anchor for the start of a multiline string. See also ^.",
    "comment": "",
    "change_original": null
  },
  { "type": "ruby",
    "name": "^",
    "variables": {},
    "command": "^.",
    "output": "Anchor for the start of a single line string. Not same as e.g. [^z]! See also \\A.",
    "comment": "",
    "change_original": null
  }]
}